#!/usr/bin/env python
#
# Electrum - lightweight Bitcoin client
# Copyright (C) 2011 thomasv@gitorious
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import re
import pkgutil
import sys, os, time, json
import optparse
import platform
from decimal import Decimal
from lib.commands import known_commands, protected_commands, offline_commands,\
    Commands
from electrum.util import set_verbosity
from electrum import mnemonic
from lib import util
from lib.simple_config import SimpleConfig
from lib.wallet import Wallet, WalletSynchronizer
from lib.interface import Interface, pick_random_server
from lib.verifier import WalletVerifier
from lib.util import print_msg, print_error
from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.popup import Popup


try:
    import ecdsa
except ImportError:
    sys.exit("Error: python-ecdsa does not seem to be installed. Try 'sudo pip install ecdsa'")

try:
    import aes
except ImportError:
    sys.exit("Error: AES does not seem to be installed. Try 'sudo pip install slowaes'")


is_local = os.path.dirname(os.path.realpath(__file__)) == os.getcwd()
is_android = 'ANDROID_DATA' in os.environ

import __builtin__
__builtin__.use_local_modules = is_local or is_android

# load local module as electrum
if __builtin__.use_local_modules:
    import imp
    imp.load_module('electrum', *imp.find_module('lib'))
    imp.load_module('electrum_gui', *imp.find_module('gui'))


# get password routine
def prompt_password(prompt, confirm=True):
    import getpass
    if sys.stdin.isatty():
        password = getpass.getpass(prompt)
        if password and confirm:
            password2 = getpass.getpass("Confirm: ")
            if password != password2:
                sys.exit("Error: Passwords do not match.")
    else:
        password = raw_input(prompt)
    if not password:
        password = None
    return password

def arg_parser():
    usage = "usage: %prog [options] command\nCommands: "+ (', '.join(known_commands))
    parser = optparse.OptionParser(prog=usage)
    parser.add_option("-g", "--gui", dest="gui", help="User interface: qt, lite, gtk or text")
    parser.add_option("-w", "--wallet", dest="wallet_path", help="wallet path (default: electrum.dat)")
    parser.add_option("-o", "--offline", action="store_true", dest="offline", default=False, help="remain offline")
    parser.add_option("-a", "--all", action="store_true", dest="show_all", default=False, help="show all addresses")
    parser.add_option("-b", "--balance", action="store_true", dest="show_balance", default=False, help="show the balance of listed addresses")
    parser.add_option("-l", "--labels", action="store_true", dest="show_labels", default=False, help="show the labels of listed addresses")
    parser.add_option("-f", "--fee", dest="tx_fee", default=None, help="set tx fee")
    parser.add_option("-F", "--fromaddr", dest="from_addr", default=None, help="set source address for payto/mktx. if it isn't in the wallet, it will ask for the private key unless supplied in the format public_key:private_key. It's not saved in the wallet.")
    parser.add_option("-c", "--changeaddr", dest="change_addr", default=None, help="set the change address for payto/mktx. default is a spare address, or the source address if it's not in the wallet")
    parser.add_option("-s", "--server", dest="server", default=None, help="set server host:port:protocol, where protocol is t or h")
    parser.add_option("-p", "--proxy", dest="proxy", default=None, help="set proxy [type:]host[:port], where type is socks4,socks5 or http")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False, help="show debugging information")
    parser.add_option("-P", "--portable", action="store_true", dest="portable", default=False, help="portable wallet")
    parser.add_option("-L", "--lang", dest="language", default=None, help="defaut language used in GUI")
    parser.add_option("-u", "--usb", dest="bitkey", action="store_true", help="Turn on support for hardware wallets (EXPERIMENTAL)")
    return parser

class ElectrumApp(App):

    def parse_configure(self):
        parser = arg_parser()
        options, self.args = parser.parse_args()
        if options.portable and options.wallet_path is None:
            options.wallet_path = os.path.dirname(os.path.realpath(__file__)) + '/electrum.dat'

        set_verbosity(options.verbose)

        # config is an object passed to the various constructors (wallet,
        # interface, gui)
        if is_android:
            config_options = {'wallet_path':"/sdcard/electrum.dat",
                              'portable':True, 'verbose':True,
                              'gui':'android', 'auto_cycle':True}
        else:
            config_options = eval(str(options))
            for k, v in config_options.items():
                if v is None: config_options.pop(k)

        # Wallet migration on Electrum 1.7
        # Todo: In time we could remove this again
        if platform.system() == "Windows":
            util.check_windows_wallet_migration()

        self.config = SimpleConfig(config_options)
        self.wallet = Wallet(self.config)

    def get_args(self):
        if len(self.args)==0:
            self.url = None
            self.cmd = 'gui'
        elif len(self.args)==1 and re.match('^bitcoin:', self.args[0]):
            self.url = self.args[0]
            self.cmd = 'gui'
        else:
            self.cmd = self.args[0]

    def handle_show_seed_callback(self):
        self.gui.verify_seed()

    def handle_network_dialog_callback(self, result):
        print("handle_network_dialog_callback")
        print("result: ")
        print(result)

    def handle_on_seed_verify_successed(self):
        print("handle_on_seed_verify_successed")
        self.wallet.save_seed()
        self.gui.network_dialog_custom(self.handle_network_dialog_callback)

    def handle_on_seed_verify_fail(self):
        exit()

    def handle_restore_or_create_callback(self, instance):
        action = instance.text
        if str(action) =='Create':
            print("case equal to create")
            self.wallet.init_seed(None)
            self.gui.show_seed_with_parent(self)

        """
        else:
            # ask for seed and gap.
            sg = self.gui.seed_dialog()
            if not sg: exit()
            seed, gap = sg
            if not seed: exit()
            self.wallet.gap_limit = gap
            if len(seed) == 128:
                self.wallet.seed = ''
                self.wallet.init_sequence(str(seed))
            else:
                self.wallet.init_seed(str(seed))
                self.wallet.save_seed()
        """
        # select a server.
        s = self.gui.network_dialog()


    def handle_gui_cmd(self):
        if self.cmd == 'gui':
            gui_name = self.config.get('gui', 'kivy')
            try:
                self.gui = __import__('electrum_gui.gui_' + gui_name,
                                 fromlist=['electrum_gui'])
            except ImportError:
                sys.exit("Error: Unknown GUI: " + gui_name )

            interface = Interface(self.config, True)
            self.wallet.interface = interface

            self.gui = self.gui.ElectrumGui(self.wallet, self.config, self)

            found = self.config.wallet_file_exists
            if not found:
                self.gui.restore_or_create()

#             if not found:
#
#                 gui.restore_or_create()
#                 #a = gui.restore_or_create()
#
#                 if not a: exit()
#
#                 if a =='create':
#                     self.wallet.init_seed(None)
#                     gui.show_seed()
#                     if gui.verify_seed():
#                         self.wallet.save_seed()
#                     else:
#                         exit()
#
#                 else:
#                     # ask for seed and gap.
#                     sg = gui.seed_dialog()
#                     if not sg: exit()
#                     seed, gap = sg
#                     if not seed: exit()
#                     self.wallet.gap_limit = gap
#                     if len(seed) == 128:
#                         self.wallet.seed = ''
#                         self.wallet.init_sequence(str(seed))
#                     else:
#                         self.wallet.init_seed(str(seed))
#                         self.wallet.save_seed()
#
#                 # select a server.
#                 s = gui.network_dialog()
#
#             interface.start(wait = False)
#             interface.send([('server.peers.subscribe',[])])
#
#             # generate the first addresses, in case we are offline
#             if not found and ( s is None or a == 'create'):
#                 self.wallet.synchronize()
#
#             verifier = WalletVerifier(interface, self.config)
#             verifier.start()
#             self.wallet.set_verifier(verifier)
#             synchronizer = WalletSynchronizer(self.wallet, self.config)
#             synchronizer.start()
#
#             if not found and a == 'restore' and s is not None:
#                 try:
#                     keep_it = gui.restore_wallet()
#                     self.wallet.fill_addressbook()
#                 except:
#                     import traceback
#                     traceback.print_exc(file=sys.stdout)
#                     exit()
#
#                 if not keep_it: exit()
#
#             if not found:
#                 gui.password_dialog()
#
#             self.wallet.save()
#             gui.main(self.url)
#             self.wallet.save()
#
#             verifier.stop()
#             synchronizer.stop()
#             interface.stop()
#
#             # we use daemon threads, their termination is enforced.
#             # this sleep command gives them time to terminate cleanly.
#             time.sleep(0.1)
#             sys.exit(0)
#
#         if self.cmd not in known_commands:
#             self.cmd = 'help'
#
#         if not self.config.wallet_file_exists and self.cmd not in ['help','create','restore']:
#             print_msg("Error: Wallet file not found.")
#             print_msg("Type 'electrum create' to create a new wallet, or provide a path to a wallet with the -w option")
#             sys.exit(0)

#
#     def work_flow(self):
#         # if run default it always use gui.( case args length = 0 )
#
#
#         if self.cmd in ['create', 'restore']:
#             if self.config.wallet_file_exists:
#                 sys.exit("Error: Remove the existing wallet first!")
#             password = prompt_password("Password (hit return if you do not wish to encrypt your wallet):")
#
#             server = self.config.get('server')
#             if not server: server = pick_random_server()
#             w_host, w_port, w_protocol = server.split(':')
#             host = raw_input("server (default:%s):"%w_host)
#             port = raw_input("port (default:%s):"%w_port)
#             protocol = raw_input("protocol [t=tcp;h=http;n=native] (default:%s):"%w_protocol)
#             fee = raw_input("fee (default:%s):"%( str(Decimal(self.wallet.fee)/100000000)) )
#             gap = raw_input("gap limit (default 5):")
#             if host: w_host = host
#             if port: w_port = port
#             if protocol: w_protocol = protocol
#             self.wallet.config.set_key('server', w_host + ':' + w_port + ':' +w_protocol)
#             if fee: self.wallet.fee = float(fee)
#             if gap: self.wallet.gap_limit = int(gap)
#
#             if self.cmd == 'restore':
#                 seed = raw_input("seed:")
#                 try:
#                     seed.decode('hex')
#                 except:
#                     print_error("Warning: Not hex, trying decode.")
#                     #seed = mnemonic_decode(seed.split(' '))
#                     seed = mnemonic.mn_decode(seed.split(' '))
#                 if not seed:
#                     sys.exit("Error: No seed")
#
#                 if len(seed) == 128:
#                     self.wallet.seed = None
#                     self.wallet.init_sequence(str(seed))
#                 else:
#                     self.wallet.init_seed( str(seed) )
#
#                 if not options.offline:
#                     interface = Interface(self.config)
#                     if not interface.start(wait=True):
#                         print_msg("Not connected, aborting.")
#                         sys.exit(1)
#                     self.wallet.interface = interface
#                     verifier = WalletVerifier(interface, self.config)
#                     verifier.start()
#                     self.wallet.set_verifier(verifier)
#
#                     print_msg("Recovering wallet...")
#                     WalletSynchronizer(self.wallet, self.config).start()
#                     self.wallet.update()
#                     if self.wallet.is_found():
#                         print_msg("Recovery successful")
#                     else:
#                         print_msg("Warning: Found no history for this wallet")
#                 else:
#                     self.wallet.synchronize()
#                 self.wallet.fill_addressbook()
#                 self.wallet.save()
#                 print_msg("Wallet saved in '%s'"%self.wallet.config.path)
#             else:
#                 self.wallet.init_seed(None)
#                 self.wallet.synchronize() # there is no self.wallet thread
#                 self.wallet.save()
#                 print_msg("Your wallet generation seed is: " + self.wallet.seed)
#                 print_msg("Please keep it in a safe place; if you lose it, you will not be able to restore your wallet.")
#                 print_msg("Equivalently, your wallet seed can be stored and recovered with the following mnemonic code:")
#                 #print_msg("\""+' '.join(mnemonic_encode(wallet.seed))+"\"")
#                 print_msg("\""+' '.join( mnemonic.mn_encode(self.wallet.seed))+"\"")
#                 print_msg("Wallet saved in '%s'"%self.wallet.config.path)
#
#             if password:
#                 self.wallet.update_password(self.wallet.seed, None, password)
#
#             # terminate
#             sys.exit(0)
#
#
#
#         # important warning
#         if self.cmd in ['dumpprivkey', 'dumpprivkeys']:
#             print_msg("WARNING: ALL your private keys are secret.")
#             print_msg("Exposing a single private key can compromise your entire wallet!")
#             print_msg("In particular, DO NOT use 'redeem private key' services proposed by third parties.")
#
#         # commands needing password
#         if self.cmd in protected_commands:
#             if self.wallet.use_encryption:
#                 password = prompt_password('Password:', False)
#                 if not password:
#                     print_msg("Error: Password required")
#                     exit(1)
#                 # check password
#                 try:
#                     seed = self.wallet.decode_seed(password)
#                 except:
#                     print_msg("Error: This password does not decode this wallet.")
#                     exit(1)
#             else:
#                 password = None
#                 seed = self.wallet.seed
#         else:
#             password = None
#
#
#         # add missing arguments, do type conversions
#         if self.cmd == 'importprivkey':
#             # See if they specificed a key on the cmd line, if not prompt
#             if len(self.args) == 1:
#                 self.args[1] = prompt_password('Enter PrivateKey (will not echo):', False)
#
#         elif self.cmd == 'signrawtransaction':
#             self.args = [ self.cmd, self.args[1], json.loads(self.args[2]) if len(self.args)>2 else [], json.loads(self.args[3]) if len(self.args)>3 else []]
#
#         elif self.cmd == 'createmultisig':
#             self.args = [ self.cmd, int(self.args[1]), json.loads(self.args[2])]
#
#         elif self.cmd == 'createrawtransaction':
#             self.args = [ self.cmd, json.loads(self.args[1]), json.loads(self.args[2])]
#
#         elif self.cmd == 'listaddresses':
#             self.args = [self.cmd, options.show_all, options.show_balance, options.show_labels]
#
#         elif self.cmd in ['payto', 'mktx']:
#             domain = [options.from_addr] if options.from_addr else None
#             self.args = [ 'mktx', self.args[1], Decimal(self.args[2]), Decimal(options.tx_fee) if options.tx_fee else None, options.change_addr, domain ]
#
#         elif self.cmd == 'help':
#             if len(self.args) < 2:
#                 parser.print_help()
#                 print_msg("Type 'electrum help <command>' to see the help for a specific command")
#                 print_msg("Type 'electrum --help' to see the list of options")
#
#
#
#
#         # check the number of arguments
#         min_args, max_args, description, syntax, options_syntax = known_commands[self.cmd]
#         if len(self.args) - 1 < min_args:
#             print_msg("Not enough arguments")
#             print_msg("Syntax:", syntax)
#             sys.exit(1)
#
#         if max_args >= 0 and len(self.args) - 1 > max_args:
#             print_msg("too many arguments", self.args)
#             print_msg("Syntax:", syntax)
#             sys.exit(1)
#
#         if max_args < 0:
#             if len(self.args) > min_args + 1:
#                 message = ' '.join(self.args[min_args:])
#                 print_msg("Warning: Final argument was reconstructed from several arguments:", repr(message))
#                 self.args = self.args[0:min_args] + [ message ]
#
#         # open session
#         if self.cmd not in offline_commands and not options.offline:
#             interface = Interface(self.config)
#             interface.register_callback('connected', lambda: sys.stderr.write("Connected to " + interface.connection_msg + "\n"))
#             if not interface.start(wait=True):
#                 print_msg("Not connected, aborting.")
#                 sys.exit(1)
#             self.wallet.interface = interface
#             verifier = WalletVerifier(interface, self.config)
#             verifier.start()
#             self.wallet.set_verifier(verifier)
#             synchronizer = WalletSynchronizer(self.wallet, self.config)
#             synchronizer.start()
#             self.wallet.update()
#             self.wallet.save()
#
#
#         # run the command
#
#         if self.cmd == 'deseed':
#             if not self.wallet.seed:
#                 print_msg("Error: This wallet has no seed")
#             else:
#                 ns = self.wallet.config.path + '.seedless'
#                 print_msg("Warning: you are going to create a seedless wallet'\nIt will be saved in '%s'"%ns)
#                 if raw_input("Are you sure you want to continue? (y/n) ") in ['y','Y','yes']:
#                     self.wallet.config.path = ns
#                     self.wallet.seed = ''
#                     self.wallet.use_encryption = False
#                     self.wallet.config.set_key('seed','', True)
#                     for k in self.wallet.imported_keys.keys(): self.wallet.imported_keys[k] = ''
#                     self.wallet.save()
#                     print_msg("Done.")
#                 else:
#                     print_msg("Action canceled.")
#
#         elif self.cmd == 'eval':
#             print_msg(eval(self.args[1]))
#             self.wallet.save()
#
#         elif self.cmd == 'getconfig':
#             key = self.args[1]
#             print_msg(self.wallet.config.get(key))
#
#         elif self.cmd == 'setconfig':
#             key, value = self.args[1:3]
#             if key not in ['seed', 'seed_version', 'master_public_key', 'use_encryption']:
#                 self.wallet.config.set_key(key, value, True)
#                 print_msg(True)
#             else:
#                 print_msg(False)
#
#         elif self.cmd == 'password':
#             new_password = prompt_password('New password:')
#             self.wallet.update_password(seed, password, new_password)
#
#         else:
#             cmd_runner = Commands(self.wallet, interface)
#             func = eval('cmd_runner.' + self.cmd)
#             cmd_runner.password = password
#             try:
#                 result = func(*self.args[1:])
#             except BaseException, e:
#                 print_msg("Error: " + str(e))
#                 sys.exit(1)
#
#             if type(result) == str:
#                 util.print_msg(result)
#             elif result is not None:
#                 util.print_json(result)
#
#
#         if self.cmd not in offline_commands and not options.offline:
#             verifier.stop()
#             synchronizer.stop()
#             interface.stop()
#             time.sleep(0.1)
#             sys.exit(0)
#

    def build(self):
        return BoxLayout()

    def on_start(self):
        self.parse_configure()
        self.get_args()
        self.handle_gui_cmd()

if __name__ == '__main__':
    ElectrumApp().run()
