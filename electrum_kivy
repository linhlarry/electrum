# TODO: remove
import imp
imp.load_module('electrum', *imp.find_module('lib'))
imp.load_module('electrum_gui', *imp.find_module('gui'))

import kivy
from kivy.config import Config
#Config.set('graphics', 'width', '800')
#Config.set('graphics', 'height', '600')

import os
import sys
import optparse
import platform
import time
import datetime
import re
import json
import traceback
import threading
import csv

from pprint import pprint
from decimal import Decimal

from kivy.app import App
from kivy.clock import Clock


from kivy.uix.tabbedpanel import TabbedPanel, TabbedPanelItem

from kivy.properties import ObjectProperty
from kivy.logger import Logger

from electrum import mnemonic, util, bitcoin
from electrum.interface import Interface
from electrum.simple_config import SimpleConfig
from electrum.wallet import Wallet, WalletSynchronizer
from electrum.util import set_verbosity, format_satoshis, print_error, print_msg
from electrum.commands import known_commands, Commands
from electrum.verifier import WalletVerifier
from electrum.bitcoin import is_valid, MIN_RELAY_TX_FEE

from electrum_gui.kivy_combobox import ComboBox
from electrum_gui.kivy_dialog import (CreateRestoreDialog,
                                      InitSeedDialog, VerifySeedDialog,
                                      RestoreSeedDialog, MessageBoxError,
                                      MessageBoxExit, ChangePasswordDialog,
                                      InfoBubble, PasswordRequiredDialog)
from electrum_gui.kivy_gridview import GridView
from electrum_gui.kivy_console import Console
from electrum_gui.kivy_statusbar import StatusBar
from electrum_gui.kivy_screens import RootManager
from electrum_gui.i18n import  _
import electrum_gui.exchange_rate as exchange_rate

#_ = lambda x: x


DEBUG = True

class ElectrumGui(object):

    def __init__(self, **kwargs):
        self.app = App.get_running_app()
        self.wallet = app.wallet
        self.conf = app.conf
        self.action = None  # updated by self.restore_or_create_dialog()

    def change_network_dialog(self, instance=None):
        # renamed from network_dialog()
        """Can be called directly (instance is None)
        or from a callback (instance is not None)"""
        self.app.root.current = 'screen_network'
        if not instance:
            self.app.root.current_screen.initialized = False

    def init_seed_dialog(self, instance=None, password=None):
        # renamed from show_seed()
        '''Can be called directly (password is None)
        or from a password-protected callback (password is not None)'''

        if not self.wallet.seed:
            return MessageBoxError(message=_('No seed')).open()

        if password is None:
            seed = self.wallet.seed
        else:
            try:
                seed = self.wallet.decode_seed(password)
            except Exception:
                return MessageBoxError(message=_('Incorrect Password'))

        brainwallet = ' '.join(mnemonic.mn_encode(seed))

        msg2 = _("Please write down or memorize these 12 words (order " + \
                "is important). This seed will allow you to recover your" +\
                " wallet in case of computer failure. Your seed is also" +\
                " displayed as QR code, in case you want to transfer it" +\
                " to a mobile phone.") + "\n\n[b][color=ff0000ff]WARNING" +\
                "[/color] : [/b] " + _("Never disclose your seed. Never type" +\
                " it on a website.")

        if self.wallet.imported_keys:
            msg2 += "[b][color=#ff0000ff]" + _("WARNING") + "[/color]:[/b] " +\
                    _("Your wallet contains imported keys. These keys cannot" +\
                    " be recovered from seed.")

        def on_ok_press(_dlg, _btn):
            _dlg.close()
            if instance is None:  # in initial phase
                self.verify_seed_dialog()


        InitSeedDialog(message=msg2,
                        seed_msg=brainwallet,
                        seed=seed,
                        on_release=on_ok_press).open()

    def change_password_dialog(self, instance=None):
        """Can be called directly (instance is None)
        or from a callback (instance is not None)"""

        wallet = self.wallet

        if not wallet.seed:
            return MessageBoxExit(message=_('No seed !!')).open()

        if instance is not None:
            msg = (_('Your wallet is encrypted. Use this dialog to change your password.') + '\n'\
                   + _('To disable wallet encryption, enter an empty new password.')) \
                   if wallet.use_encryption else _('Your wallet keys are not encrypted')
        else:
            msg = _("Please choose a password to encrypt your wallet keys.") + '\n'\
                  + _("Leave these fields empty if you want to disable encryption.")

        mode = _('confirm') if wallet.use_encryption else _('new')

        def on_ok_press(_dlg, _btn):
            if _btn.text != _('Cancel'):
                password = (unicode(_dlg.ids.ti_password.text)
                            if wallet.use_encryption else
                            None)
                new_password = unicode(_dlg.ids.ti_new_password.text)
                new_password2 = unicode(_dlg.ids.ti_confirm_password.text)

                try:
                    seed = wallet.decode_seed(password)
                except BaseException:
                    return MessageBoxError(
                        message=_('Incorrect Password')).open()

                if new_password != new_password2:
                    return MessageBoxError(
                        message=_('Passwords do not match')).open()

                # TODO: test carefully
                try:
                    wallet.update_password(seed, password, new_password)
                except BaseException:
                    return MessageBoxExit(
                        message=_('Failed to update password')).open()
                else:
                    self.app.show_info_bubble(
                        text=_('Password successfully updated'), duration=1,
                        pos=_btn.pos)
                    _dlg.close()
            else:
                _dlg.close()


            if instance is None:  # in initial phase
                self.load_wallet()
            self.app.gui.main_gui.update_wallet()

        cpd = ChangePasswordDialog(title=_('Password'),
                             message=msg,
                             mode=mode,
                             on_release=on_ok_press).open()


class ElectrumInitGui(ElectrumGui):

    def __init__(self, **kwargs):
        super(ElectrumInitGui, self).__init__(**kwargs)
        self.app = kwargs['app']

    def restore_or_create_dialog(self):

        def on_release(dialog, button):
            if button.text == _('Create'):
                dialog.close()
                self.action = 'create'
                self.wallet.init_seed(None)
                self.init_seed_dialog()
            elif button.text == _('Restore'):
                dialog.close()
                self.action = 'restore'
                self.wallet.init_seed(None)
                self.restore_seed_dialog()
            else:
                self.app.stop()

        CreateRestoreDialog(on_release=on_release,
                                buttons=[_('Create'),
                                        _('Restore'),
                                        _('Cancel')],
                                auto_dismiss=False).open()

    def on_verify_restore_ok(self, _dlg, btn):
            _dlg.close()
            seed = _dlg.ids.text_input_seed.text

            try:
                seed.decode('hex')
            except Exception:
                try:
                    seed = mnemonic.mn_decode(seed.split())
                except Exception:
                    return MessageBoxExit(
                                message=_('Unable to decode seed !!')).open()

            if not seed:
                return MessageBoxExit(message=_('No Seed !!')).open()

            wallet = self.wallet
            is_restore = bool(_dlg.__class__ == RestoreSeedDialog)

            if not is_restore:  # Create
                if seed != wallet.seed:
                    return MessageBoxExit(
                                message=_('Incorrect Seed !!')).open()
                wallet.save_seed()
            else:  # Restore
                try:
                    gap = int(unicode(_dlg.ids.text_input_gap.text))
                except Exception:
                    return MessageBoxExit(
                            message=_('Gap must be an integer')).open()
                wallet.gap_limit = gap
                if len(seed) == 128:
                    wallet.seed = ''
                    wallet.init_sequence(str(seed))
                else:
                    wallet.seed = ''
                    wallet.init_seed(str(seed))
                    wallet.save_seed()

            return self.change_network_dialog()

    def restore_seed_dialog(self):
        RestoreSeedDialog(on_release=self.on_verify_restore_ok).open()

    def verify_seed_dialog(self):
        VerifySeedDialog(on_release=self.on_verify_restore_ok).open()

    def restore_wallet(self):
        return True  # TODO

        wallet = self.wallet
        # wait until we are connected, because the user might have selected another server
        if not wallet.interface.is_connected:
            waiting = lambda: False if wallet.interface.is_connected else "%s \n" % (_("Connecting..."))
            waiting_dialog(waiting)

        waiting = lambda: False if wallet.is_up_to_date() else "%s\n%s %d\n%s %.1f"\
            % (_("Please wait..."), _("Addresses generated:"), len(wallet.addresses(True)), _("Kilobytes received:"), wallet.interface.bytes_received / 1024.)

        wallet.set_up_to_date(False)
        wallet.interface.poke('synchronizer')
        waiting_dialog(waiting)
        if wallet.is_found():
            print_error("Recovery successful")
        else:
            QMessageBox.information(None, _('Error'), _("No transactions found for this seed"), _('OK'))

        return True

    def load_wallet(self):
        Logger.info("Electrum: loading wallet...")
        interface = self.wallet.interface

        Logger.info("Electrum: starting wallet interface")
        interface.start(wait=False)
        Logger.info("Electrum: sending subscription notice")
        interface.send([('server.peers.subscribe', [])])

        verifier = WalletVerifier(interface, self.conf)
        Logger.info("Electrum: starting verifier")
        verifier.start()
        self.wallet.set_verifier(verifier)
        synchronizer = WalletSynchronizer(self.wallet, self.conf)
        synchronizer.start()

        url = None  # TODO:
        self.main(url)

    def main(self, url):  # TODO:
        Logger.info("Electrum: starting main gui")
        main_gui = ElectrumMainGui(app=app)
        self.main_gui = main_gui
        main_gui.show()
        main_gui.connect_slots()
        main_gui.update_wallet()


class ElectrumMainGui(ElectrumGui):

    def __init__(self, **kwargs):
        super(ElectrumMainGui, self).__init__(**kwargs)
        self.app = App.get_running_app()

        self.current_account = app.conf.get("current_account", None)

        self.init_plugins()
        #self.create_status_bar()

        self.need_update = threading.Event()
        self.wallet.interface.register_callback('updated', lambda: self.need_update.set())
        self.wallet.interface.register_callback('banner', lambda: self.console.showMessage(self.wallet.interface.banner))
        self.wallet.interface.register_callback('disconnected', self.update_status)
        self.wallet.interface.register_callback('disconnecting', self.update_status)
        self.wallet.interface.register_callback('refresh_balance()', self.update_status)

        self.expert_mode = app.conf.get('classic_expert_mode', False)
        self.decimal_point = app.conf.get('decimal_point', 8)

        #### set_language(self.conf.get('language'))

        self.funds_error = False
        self.completions = []

        #### self.column_widths = self.conf.get("column_widths", default_column_widths)  # NOTE: not used in Kivy now

        self.exchanger = exchange_rate.Exchanger(self)
        #### self.connect(self, SIGNAL("refresh_balance()"), self.update_wallet)

        # set initial message
        #### self.console.showMessage(self.wallet.interface.banner)

        # fix fee
        if self.wallet.fee < 50000:
            self.wallet.set_fee(50000)
            self.app.show_info_bubble(
                text="Note: Your default fee was raised to 0.0005 BTC/kilobyte",
                duration=0)

        # plugins that need to change the GUI do it here
        self.run_hook('init_gui')

    def init_plugins(self):
        # NOTE: Kivy GUI doesn't has any plugin now
        pass

    def run_hook(self, name, *args):
        # NOTE: It just depends on plugins which not exist in Kivy GUI now
        return

    def set_label(self, name, text=None):
        """Update labels in list"""
        changed = False
        old_text = self.wallet.labels.get(name)
        if text:
            if old_text != text:
                self.wallet.labels[name] = text
                changed = True
        else:
            if old_text:
                self.wallet.labels.pop(name)
                changed = True
        self.run_hook('set_label', name, text, changed)
        return changed

    def getOpenFileName(self, title, filter=None):
        # TODO:
        pass

    def getSaveFileName(self, title, filename, filter=None):
        # TODO:
        pass

    def close(self):
        self.app.stop()
        self.run_hook('close_main_window')

    def connect_slots(self):
        Clock.unschedule(self.timer_actions)
        Clock.schedule_interval(self.timer_actions, 0.5)
        # self.previous_payto_e = ''  # For plugins only

    def timer_actions(self, interval):
        # print 'timer_actions', datetime.datetime.now()
        if self.need_update.is_set():
            self.update_wallet()
            self.need_update.clear()
        self.run_hook('timer_actions')

    def format_amount(self, x, is_diff=False):
        return format_satoshis(x, is_diff, self.wallet.num_zeros, self.decimal_point)

    def read_amount(self, x):
        if x in['.', '']: return None
        p = pow(10, self.decimal_point)
        return int(p * Decimal(x))

    def base_unit(self):
        assert self.decimal_point in [5, 8]
        return "BTC" if self.decimal_point == 8 else "mBTC"

    def update_status(self):
        if self.wallet.interface and self.wallet.interface.is_connected:
            if not self.wallet.up_to_date:
                text = _("Synchronizing...")
                # icons set in kv depending on text
                # icon = QIcon(":icons/status_waiting.png")
            else:
                c, u = self.wallet.get_account_balance(self.current_account)
                text = _("Balance") + ": %s " % (self.format_amount(c)) +\
                    self.base_unit()
                if u:
                    text += " [%s unconfirmed]"\
                        % (self.format_amount(u, True).strip())
                text += self.create_quote_text(Decimal(c + u) / 100000000)
                # icon = QIcon(":icons/status_connected.png")
        else:
            text = _("Not connected")
            # icon = QIcon(":icons/status_disconnected.png")

        # connection icons set in kv depending on text
        status_bar = self.app.root.main_screen.ids.status_bar
        status_bar.text = text
        status_bar.ids.lock_icon.source = ('icons/lock.png'
                                    if app.wallet.use_encryption else
                                    'icons/unlock.png')
        # self.status_button.setIcon(icon)

    def update_wallet(self):
        self.update_status()
        if self.wallet.up_to_date or not self.wallet.interface.is_connected:
            #self.update_history_tab()
            self.update_receive_tab()
            self.update_contacts_tab()
            self.update_completions()

    def create_quote_text(self, btc_balance):
        quote_currency = self.conf.get("currency", "None")
        quote_balance = self.exchanger.exchange(btc_balance, quote_currency)
        if quote_balance is None:
            quote_text = ""
        else:
            quote_text = "  (%.2f %s)" % (quote_balance, quote_currency)
        return quote_text

    def initialize_history_tab(self):
        self.update_history_tab()

    def create_history_menu(self, position):
        # NOTE: no context menu for Kivy now
        pass

    def show_tx_details(self, tx):
        # NOTE: depend on self.create_history_menu()
        pass

    def tx_label_clicked(self, item, column):
        # TODO: depend on self.create_history_tab() and self.create_history_menu()
        pass

    def tx_label_changed(self, item, column):
        # NOTE: depend on self.create_history_menu()
        pass

    def edit_label(self, is_recv):
        # TODO:
        pass

    def address_label_clicked(self, item, column, l, column_addr, column_label):
        # TODO:
        pass

    def address_label_changed(self, item, column, l, column_addr, column_label):
        # TODO:
        pass

    def generate_transaction_information_widget(self, tx):
        def add_outputs():
            return GridView(
                headers=[_('Address'), _('Amount')],
                widths=[400, 176],
                data=[(address, self.format_amount(value)) for address, value in tx.outputs],
            ).layout

        def add_inputs():
            return GridView(
                headers=[_('Address'), _('Previous output')],
                widths=[200, 376],
                data=[(str(input["address"]), str(input["prevout_hash"])) for input in tx.inputs],
            ).layout

        tabs = TabbedPanel(do_default_tab=False)
        self.add_tab(tabs, add_outputs(), _('Outputs'))
        self.add_tab(tabs, add_inputs(), _('Inputs'))
 
        return tabs

    def current_item_changed(self, item):
        self.run_hook('current_item_changed', item)

    def update_history_tab(self):
        def parse_histories(items):
            results = []
            for item in items:
                tx_hash, conf, is_mine, value, fee, balance, timestamp = item
                if conf > 0:
                    try:
                        time_str = datetime.datetime.fromtimestamp(timestamp).isoformat(' ')[:-3]
                    except:
                        time_str = "unknown"

                if conf == -1:
                    time_str = 'unverified'
                    # icon = QIcon(":icons/unconfirmed.png")
                elif conf == 0:
                    time_str = 'pending'
                    # icon = QIcon(":icons/unconfirmed.png")
                elif conf < 6:
                    time_str = ''  # add new to fix error when conf < 0
                    # icon = QIcon(":icons/clock%d.png"%conf)
                    pass
                else:
                    # icon = QIcon(":icons/confirmed.png")
                    pass

                if value is not None:
                    v_str = self.format_amount(value, True)
                else:
                    v_str = '--'

                balance_str = self.format_amount(balance)

                if tx_hash:
                    label, is_default_label = self.wallet.get_label(tx_hash)
                else:
                    label = _('Pruned transaction outputs')
                    is_default_label = False

                # NOTE: just show 5 on a row but get 6. The last one is ID of that row.
                results.append(('', time_str, label, v_str, balance_str, tx_hash))

                # item = QTreeWidgetItem( [ '', time_str, label, v_str, balance_str] )
                # item.setFont(2, QFont(MONOSPACE_FONT))
                # item.setFont(3, QFont(MONOSPACE_FONT))
                # item.setFont(4, QFont(MONOSPACE_FONT))
                # if value < 0:
                #    item.setForeground(3, QBrush(QColor("#BC1E1E")))
                # if tx_hash:
                #    item.setData(0, Qt.UserRole, tx_hash)
                #    item.setToolTip(0, "%d %s\nTxId:%s" % (conf, _('Confirmations'), tx_hash) )
                # if is_default_label:
                #    item.setForeground(2, QBrush(QColor('grey')))

                # item.setIcon(0, icon)
                # self.history_list.insertTopLevelItem(0,item)

            return results

        history_view = self.app.root.main_screen.ids.screen_history.history_view
        history_view.content_adapter.data = \
            parse_histories(reversed(self.wallet.get_tx_history(self.current_account)))

    def update_completions(self):
        l = []
        for addr, label in self.wallet.labels.items():
            if addr in self.wallet.addressbook:
                l.append(label + '  <' + addr + '>')

        self.run_hook('update_completions', l)
        self.completions = l

    def protected(func):
        return lambda s, *args: s.do_protect(func, args)

    def do_protect(self, func, args):
        _args = args
        def run_func(instance=None, password=None):
            args = (self,) + _args + (password,)
            apply(func, args)

        if self.wallet.use_encryption:
            return self.password_required_dialog(post_ok=run_func)

        return run_func()

    @protected
    def do_send(self, instance, password):
        screen_send = app.root.main_screen.ids.screen_send

        label = unicode(screen_send.ids.message_e.text)
        r = unicode(screen_send.ids.payto_e.text).strip()

        # label or alias, with address in brackets
        m = re.match('(.*?)\s*\<([1-9A-HJ-NP-Za-km-z]{26,})\>', r)
        to_address = m.group(2) if m else r

        if not is_valid(to_address):
            return MessageBoxError(message=_('Invalid Bitcoin Address') +
                                            ':\n' + to_address).open()

        try:
            amount = self.read_amount(unicode(screen_send.ids.amount_e.text))
        except Exception:
            return MessageBoxError(message=_('Invalid Amount')).open()
        try:
            fee = self.read_amount(unicode(screen_send.ids.fee_e.text))
        except Exception:
            return MessageBoxError(message=_('Invalid Fee')).open()

        try:
            tx = self.wallet.mktx([(to_address, amount)],
                                  password, fee, account=self.current_account)
        except Exception, e:
            return self.app.show_info_bubble(text=str(e))

        if tx.requires_fee(self.wallet.verifier) and fee < MIN_RELAY_TX_FEE:
            return MessageBoxError(message=_('This transaction requires a'+
                                    ' higher fee, or it will not be propagated'+
                                    ' by the network.')).open()

        self.run_hook('send_tx', tx)

        if label:
            self.set_label(tx.hash(), label)

        if tx.is_complete:
            # h = self.wallet.send_tx(tx)  # async: this doesn't work in Kivy
            h = self.wallet.sendtx(tx)  # sync
            #### TODO: waiting_dialog(lambda: False if self.wallet.tx_event.isSet() else _("Please wait..."))
            status, msg = self.wallet.receive_tx(h)
            if status:
                self.app.show_info_bubble(text=_('Payment sent.') + '\n' + msg)
                self.do_clear()
                self.update_contacts_tab()
            else:
                MessageBoxError(message=msg).open()
        else:
            filename = label + '.txn' if label else 'unsigned_%s.txn' % (time.mktime(time.gmtime()))
            try:
                #### TODO: fileName = self.getSaveFileName(_("Select a transaction filename"), filename, "*.txn")
                with open(fileName, 'w') as f:
                    f.write(json.dumps(tx.as_dict(), indent=4) + '\n')
                #### TODO: QMessageBox.information(self, _('Unsigned transaction created'), _("Unsigned transaction was saved to file:") + " " + fileName, _('OK'))
            except:
                MessageBoxError(message=_('Could not write transaction to file'))

    def set_url(self, url):
        # TODO:
        pass

    #def do_clear(self, instance):
    #    # self.payto_sig.setVisible(False)
    #    for e in [self.payto_e, self.message_e, self.amount_e, self.fee_e]:
    #        e.text = ''
    #        # self.set_frozen(e, False)
    #    # self.update_status()

    def set_frozen(self, entry, frozen):
        # NOTE: not sure the Kivy has equivalent feature
        pass

    def toggle_freeze(self, addr):
        # TODO
        pass

    def toggle_priority(self, addr):
        # TODO
        pass

    def create_list_tab(self, headers):
        # NOTE: don't need this generic function in Kivy GUI
        pass

    def receive_tab_set_mode(self, i):
        # NOTE: just used once so merged into the caller
        pass

    def save_column_widths(self):
        # NOTE: not used since the widths are fixed now in Kivy GUI
        pass

    def initialize_console(self):

        self.console = console = self.app.root.main_screen.ids.screen_console.ids.console
        self.console.history = self.conf.get("console-history", [])
        self.console.history_index = len(self.console.history)

        console.updateNamespace({'wallet' : self.wallet, 'interface' : self.wallet.interface, 'gui':self})
        console.updateNamespace({'util' : util, 'bitcoin':bitcoin})

        c = Commands(self.wallet, self.wallet.interface, lambda: self.console.set_json(True))
        methods = {}
        def mkfunc(f, method):
            return lambda *args: apply(f, (method, args, self.password_required_dialog))
        for m in dir(c):
            if m[0] == '_' or m == 'wallet' or m == 'interface': continue
            methods[m] = mkfunc(c._run, m)

        console.updateNamespace(methods)

    # NEW
    def add_tab(self, tabs, widget, title):
        tab = TabbedPanelItem(text=title)
        tab.add_widget(widget)
        tabs.add_widget(tab)

    # NEW: extracted from self.__init__()
    def show(self):
        Logger.debug('Electrum: show main gui')
        # load first screen
        self.app.root.current = self.app.root.screens[0].name
        self.initialize_console()

        title = 'Electrum ' + self.wallet.electrum_version + '  -  ' + self.conf.path
        if not self.wallet.seed: title += ' [%s]' % (_('seedless'))

        self.app.title = title  # TODO: why not actually update?

        # NOTE: no need shortcut for Kivy GUI

    def password_required_dialog(self, post_ok=None):  # renamed from password_dialog()
        def on_release(_dlg, _btn):
            _dlg.close()
            if _btn.text == _('Cancel'):
                return

            password = unicode(_dlg.ids.password.text)

            try:
                seed = self.wallet.decode_seed(password)
            except:
                return MessageBoxError(message=_('Incorrect Password')).open()

            if post_ok is not None:
                post_ok(_btn, password)

        PasswordRequiredDialog(on_release=on_release).open()

    @protected
    def protected_seed_dialog(self, instance, password):
        # renamed from show_seed_dialog()
        return self.init_seed_dialog(instance, password)

    def tx_dict_from_text(self, txt):
        try:
            tx_dict = json.loads(str(txt))
            assert "hex" in tx_dict.keys()
            assert "complete" in tx_dict.keys()
            if not tx_dict["complete"]:
                assert "input_info" in tx_dict.keys()
        except:
            MessageBoxError(title='Unable to parse transaction',
                           message=_('Electrum was unable to parse' +
                                     ' your transaction')).open()
            return None
        return tx_dict

    def update_receive_item(self, item):
        # TODO: can't port completely since there's no corresponding widget
        # item.setFont(0, QFont(MONOSPACE_FONT))
        self.run_hook('update_receive_item', item)

        # c, u = self.wallet.get_addr_balance(address)
        # balance = self.format_amount(c + u)
        # item.setData(2,0,balance)

        # if self.expert_mode:
        #    if address in self.wallet.frozen_addresses:
        #        item.setBackgroundColor(0, QColor('lightblue'))
        #    elif address in self.wallet.prioritized_addresses:
        #        item.setBackgroundColor(0, QColor('lightgreen'))

    def update_receive_tab(self):
        data = []

        if self.current_account is None:
            account_items = self.wallet.accounts.items()
        elif self.current_account != -1:
            account_items = [(self.current_account, self.wallet.accounts.get(self.current_account))]
        else:
            account_items = []

        for k, account in account_items:
            name = account.get('name', str(k))
            c, u = self.wallet.get_account_balance(k)
            data = [(name, '', self.format_amount(c + u), '')]

            for is_change in ([0, 1] if self.expert_mode else [0]):
                if self.expert_mode:
                    name = "Receiving" if not is_change else "Change"
                    seq_item = (name, '', '', '')
                    data.append(seq_item)
                else:
                    seq_item = data
                is_red = False
                gap = 0

                for address in account[is_change]:
                    h = self.wallet.history.get(address, [])

                    if h == []:
                        gap += 1
                        if gap > self.wallet.gap_limit:
                            is_red = True
                    else:
                        gap = 0

                    num_tx = '*' if h == ['*'] else "%d" % len(h)
                    item = (address, self.wallet.labels.get(address, ''), '', num_tx)
                    data.append(item)
                    self.update_receive_item(item)

        if self.wallet.imported_keys and (self.current_account is None or self.current_account == -1):
            c, u = self.wallet.get_imported_balance()
            data.append((_('Imported'), '', self.format_amount(c + u), ''))
            for address in self.wallet.imported_keys.keys():
                item = (address, self.wallet.labels.get(address, ''), '', '')
                data.append(item)
                self.update_receive_item(item)

        receive_list = app.root.main_screen.ids.screen_receive.receive_view
        receive_list.content_adapter.data = data

    def update_contacts_tab(self):
        data = []
        for address in self.wallet.addressbook:
            label = self.wallet.labels.get(address, '')
            item = (address, label, "%d" % self.wallet.get_num_tx(address))
            data.append(item)
            # item.setFont(0, QFont(MONOSPACE_FONT))
            # # 32 = label can be edited (bool)
            # item.setData(0,32, True)
            # # 33 = payto string
            # item.setData(0,33, address)

        self.run_hook('update_contacts_tab')

        contact_list = app.root.main_screen.ids.screen_contacts.ids.contacts_list
        contact_list.content_adapter.data = data

    def show_settings_dialog(self, instance):
        #SettingsDialog(self, instance)
        self.app.root.current = 'screen_settings'

    def emit(self, signal):
        """Dummy function to avoid call error"""
        pass


class ElectrumApp(App):
    title = _('Electrum App')

    wallet = ObjectProperty(None)
    '''Holds the electrum wallet'''

    conf = ObjectProperty(None)
    '''Holds the electrum config'''


    def __init__(self, **kwargs):
        # initialize
        self.info_bubble = None
        super(ElectrumApp, self).__init__(**kwargs)
        self.wallet = kwargs['wallet']
        self.conf = kwargs['el_conf']  # conflicting name 'config'

    def build(self):
        return RootManager()

    def show_info_bubble(self, text=_('HelloWorld'), pos=(0, 0), duration=0,
                         arrow_pos='bottom_mid', width=None):
        '''Method to show a Information Bubble

        .. parameters::
            text: Message to be displayed
            pos: position for the bubble
            duration: duration the bubble remains on screen. 0 = click to hide
            arrow_pos: arrow position for the bubble
        '''

        info_bubble = self.info_bubble
        if not info_bubble:
            info_bubble = self.info_bubble = InfoBubble()

        info_bubble.message = text
        info_bubble.arrow_pos = arrow_pos
        info_bubble.show(pos, duration, width)

    def on_start(self):
        self.gui = gui = ElectrumInitGui(app=self)
        if not gui.conf.wallet_file_exists:
            gui.restore_or_create_dialog()
        else:
            gui.load_wallet()


def arg_parser():
    usage = "usage: %prog [options] command\nCommands: " + (', '.join(known_commands))
    parser = optparse.OptionParser(prog=usage)
    parser.add_option("-g", "--gui", dest="gui", help="User interface: qt, lite, gtk or text")
    parser.add_option("-w", "--wallet", dest="wallet_path", help="wallet path (default: electrum.dat)")
    parser.add_option("-o", "--offline", action="store_true", dest="offline", default=False, help="remain offline")
    parser.add_option("-a", "--all", action="store_true", dest="show_all", default=False, help="show all addresses")
    parser.add_option("-b", "--balance", action="store_true", dest="show_balance", default=False, help="show the balance of listed addresses")
    parser.add_option("-l", "--labels", action="store_true", dest="show_labels", default=False, help="show the labels of listed addresses")
    parser.add_option("-f", "--fee", dest="tx_fee", default=None, help="set tx fee")
    parser.add_option("-F", "--fromaddr", dest="from_addr", default=None, help="set source address for payto/mktx. if it isn't in the wallet, it will ask for the private key unless supplied in the format public_key:private_key. It's not saved in the wallet.")
    parser.add_option("-c", "--changeaddr", dest="change_addr", default=None, help="set the change address for payto/mktx. default is a spare address, or the source address if it's not in the wallet")
    parser.add_option("-s", "--server", dest="server", default=None, help="set server host:port:protocol, where protocol is t or h")
    parser.add_option("-p", "--proxy", dest="proxy", default=None, help="set proxy [type:]host[:port], where type is socks4,socks5 or http")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False, help="show debugging information")
    parser.add_option("-P", "--portable", action="store_true", dest="portable", default=False, help="portable wallet")
    parser.add_option("-L", "--lang", dest="language", default=None, help="defaut language used in GUI")
    parser.add_option("-u", "--usb", dest="bitkey", action="store_true", help="Turn on support for hardware wallets (EXPERIMENTAL)")
    return parser


if __name__ == "__main__":

    parser = arg_parser()
    options, args = parser.parse_args()

    if options.portable and options.wallet_path is None:
        options.wallet_path = os.path.dirname(os.path.realpath(__file__)) + '/electrum.dat'
    set_verbosity(options.verbose)

    # config is an object passed to the various constructors (wallet, interface, gui)
    import __builtin__
    __builtin__.use_local_modules = True  # TODO: remove hard-coded

    is_android = False  # TODO: remove hard-coded
    if is_android:
        config_options = {'wallet_path':"/sdcard/electrum.dat", 'portable':True, 'verbose':True, 'gui':'android', 'auto_cycle':True}
    else:
        config_options = eval(str(options))
        for k, v in config_options.items():
            if v is None: config_options.pop(k)

    # Wallet migration on Electrum 1.7
    # Todo: In time we could remove this again
    if platform.system() == "Windows":
        util.check_windows_wallet_migration()

    el_conf = SimpleConfig(config_options)
    el_wallet = Wallet(el_conf)
    el_wallet.interface = Interface(el_conf, True)

    app = ElectrumApp(wallet=el_wallet, el_conf=el_conf)
    app.run()
